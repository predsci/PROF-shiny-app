# Function to download sample data
output$download_data <- downloadHandler(
filename = function() {
"sample_data.csv"
},
content = function(file) {
write.csv(mock_data, file, row.names = FALSE)
}
)
observe({
data_summary <- reactive({
if (file.exists("sample_data.csv")) {
data <- read.csv("sample_data.csv")
start_date <- min(data$Date)
end_date <- max(data$Date)
paste("Start Date:", start_date, " | End Date:", end_date)
} else {
"No data available."
}
})
output$data_summary <- renderPrint({
data_summary()
})
if (file.exists("sample_data.csv")) {
data <- read.csv("sample_data.csv")
updateDateRangeInput(session, "date_range", start = min(data$Date), end = max(data$Date))
}
})
}
shinyApp(ui, server)
library(shiny)
# Mock data
mock_data <- data.frame(
Date = as.Date("2023-01-01") + 0:9,
Value = c(10, 15, 22, 18, 27, 35, 28, 30, 40, 45)
)
ui <- fluidPage(
tabsetPanel(
tabPanel("Data Download",
downloadButton("download_data", "Download Sample Data (CSV)"),
verbatimTextOutput("data_summary")
),
tabPanel("Date Range Selection",
dateRangeInput("date_range", "Select Date Range", start = "", end = "")
)
server <- function(input, output, session) {
# Function to download sample data
output$download_data <- downloadHandler(
filename = function() {
"sample_data.csv"
},
content = function(file) {
write.csv(mock_data, file, row.names = FALSE)
}
)
observe({
data_summary <- reactive({
if (file.exists("sample_data.csv")) {
data <- read.csv("sample_data.csv")
start_date <- min(data$Date)
end_date <- max(data$Date)
paste("Start Date:", start_date, " | End Date:", end_date)
} else {
"No data available."
}
})
output$data_summary <- renderPrint({
data_summary()
})
if (file.exists("sample_data.csv")) {
data <- read.csv("sample_data.csv")
updateDateRangeInput(session, "date_range", start = min(data$Date), end = max(data$Date))
}
})
}
shinyApp(ui, server)
library(shiny)
# Mock data
mock_data <- data.frame(
Date = as.Date("2023-01-01") + 0:9,
Value = c(10, 15, 22, 18, 27, 35, 28, 30, 40, 45)
)
ui <- fluidPage(
tabsetPanel(
tabPanel("Data Download",
downloadButton("download_data", "Download Sample Data (CSV)"),
verbatimTextOutput("data_summary")
),
tabPanel("Date Range Selection",
dateRangeInput("date_range", "Select End Date", start = "", end = Sys.Date())
)
server <- function(input, output, session) {
# Function to download sample data
output$download_data <- downloadHandler(
filename = function() {
"sample_data.csv"
},
content = function(file) {
write.csv(mock_data, file, row.names = FALSE)
}
)
observe({
data_summary <- reactive({
if (file.exists("sample_data.csv")) {
data <- read.csv("sample_data.csv")
start_date <- min(data$Date)
end_date <- max(data$Date)
paste("Start Date:", start_date, " | End Date:", end_date)
} else {
"No data available."
}
})
output$data_summary <- renderPrint({
data_summary()
})
if (file.exists("sample_data.csv")) {
data <- read.csv("sample_data.csv")
end_date <- max(data$Date)
updateDateRangeInput(session, "date_range", start = "", end = end_date)
}
})
}
shinyApp(ui, server)
mock_data <- data.frame(
Date = as.Date("2023-01-01") + 0:9,
Value = c(10, 15, 22, 18, 27, 35, 28, 30, 40, 45)
)
mock_data
library(shiny)
# Mock data
mock_data <- data.frame(
Date = as.Date("2023-01-01") + 0:9,
Value = c(10, 15, 22, 18, 27, 35, 28, 30, 40, 45)
)
ui <- fluidPage(
tabsetPanel(
tabPanel("Data Download",
downloadButton("download_data", "Download Sample Data (CSV)"),
verbatimTextOutput("data_summary")
),
tabPanel("Date Range Selection",
dateRangeInput("date_range", "Select Date Range", start = "", end = "")
)
server <- function(input, output, session) {
# Function to download sample data
output$download_data <- downloadHandler(
filename = function() {
"sample_data.csv"
},
content = function(file) {
write.csv(mock_data, file, row.names = FALSE)
}
)
observe({
data_summary <- reactive({
if (file.exists("sample_data.csv")) {
data <- read.csv("sample_data.csv")
start_date <- min(data$Date)
end_date <- max(data$Date)
paste("Start Date:", start_date, " | End Date:", end_date)
} else {
"No data available."
}
})
output$data_summary <- renderPrint({
data_summary()
})
if (file.exists("sample_data.csv")) {
data <- read.csv("sample_data.csv")
updateDateRangeInput(session, "date_range", start = min(data$Date), end = max(data$Date))
}
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
tabsetPanel(
tabPanel("Data Download",
downloadButton("download_data", "Generate Sample Data (CSV)"),
verbatimTextOutput("data_summary")
),
tabPanel("Date Range Selection",
dateRangeInput("date_range", "Select Date Range", start = "", end = "")
)
server <- function(input, output, session) {
# Initialize reactiveVal to store the mock data
mock_data <- reactiveVal(NULL)
# Function to generate sample data
generateSampleData <- function() {
data <- data.frame(
Date = as.Date("2023-01-01") + 0:9,
Value = c(10, 15, 22, 18, 27, 35, 28, 30, 40, 45)
)
mock_data(data)
}
# Function to download sample data
output$download_data <- downloadHandler(
filename = function() {
"sample_data.csv"
},
content = function(file) {
data <- generateSampleData()
write.csv(data, file, row.names = FALSE)
}
)
observeEvent(input$download_data, {
generateSampleData()
})
observe({
data_summary <- reactive({
if (!is.null(mock_data())) {
data <- mock_data()
start_date <- min(data$Date)
end_date <- max(data$Date)
paste("Start Date:", start_date, " | End Date:", end_date)
} else {
"No data available."
}
})
output$data_summary <- renderPrint({
data_summary()
})
if (!is.null(mock_data())) {
data <- mock_data()
updateDateRangeInput(session, "date_range", start = min(data$Date), end = max(data$Date))
}
})
}
shinyApp(ui, server)
runApp()
quit()
library(shiny)
ui <- fluidPage(
tabsetPanel(
tabPanel("Data Download",
downloadButton("download_data", "Generate Sample Data (CSV)"),
verbatimTextOutput("data_summary")
),
tabPanel("Date Range Selection",
dateRangeInput("date_range", "Select Date Range", start = "", end = "")
)
)
)
server <- function(input, output, session) {
# Initialize reactiveVal to store the mock data
mock_data <- reactiveVal(NULL)
# Function to generate sample data
generateSampleData <- function() {
data <- data.frame(
Date = as.Date("2023-01-01") + 0:9,
Value = c(10, 15, 22, 18, 27, 35, 28, 30, 40, 45)
)
mock_data(data)
}
# Function to download sample data
output$download_data <- downloadHandler(
filename = function() {
"sample_data.csv"
},
content = function(file) {
data <- generateSampleData()
write.csv(data, file, row.names = FALSE)
}
)
observeEvent(input$download_data, {
generateSampleData()
})
observe({
data_summary <- reactive({
if (!is.null(mock_data())) {
data <- mock_data()
start_date <- min(data$Date)
end_date <- max(data$Date)
paste("Start Date:", start_date, " | End Date:", end_date)
} else {
"No data available."
}
})
output$data_summary <- renderPrint({
data_summary()
})
if (!is.null(mock_data())) {
data <- mock_data()
updateDateRangeInput(session, "date_range", start = min(data$Date), end = max(data$Date))
}
})
}
shinyApp(ui, server)
runApp()
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Date Selection Slider"),
sidebarLayout(
sidebarPanel(
sliderInput("date_range", "Select Date Range:",
min = as.Date("2023-01-01"),
max = as.Date("2023-12-31"),
value = c(as.Date("2023-01-01"), as.Date("2023-03-31")),
step = 1),
textOutput("selected_date_range")
),
mainPanel(
plotOutput("date_plot")
)
)
)
# Define server
server <- function(input, output) {
output$selected_date_range <- renderText({
paste("Selected Date Range: ",
format(input$date_range[1], "%Y-%m-%d"),
" to ",
format(input$date_range[2], "%Y-%m-%d"))
})
output$date_plot <- renderPlot({
# You can use the selected date range to filter and display data
# For this example, we'll create a simple plot with the selected range
dates <- seq(input$date_range[1], input$date_range[2], by = "days")
values <- rnorm(length(dates))
plot(dates, values, type = "l", xlab = "Date", ylab = "Value")
})
}
# Run the Shiny app
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
year_data = c(2021, 2022, 2023)
as.Date(paste0(year_data[1]+1,'-06-01'))
fit_date_max = c(as.Date(paste0(year_data+1,'-06-01')))
fit_date_max
quit()
# Load required libraries
library(shiny)
library(shinyjs)
library(dplyr)
library(ggplot2)
library(plotly)
library(PROF)
# locations
loc_abbv = loc_pops$abbreviation
loc_name = loc_pops$location_name
# for now we remove the US and VI
ind = which(loc_abbv %in% c('US', 'VI'))
loc_abbv = loc_abbv[-ind]
loc_name = loc_name[-ind]
year_data = c(2021, 2022, 2023)
#
end_fit_date_min = c(as.Date(paste0(year_data,'-10-01')))
end_fit_date_max = c(as.Date(paste0(year_data+1,'-06-01')))
end_fit_date_min
end_fit_date_max
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
loaded_data <- hhs_data_ex(season = 2023, "CA")
names(loaded_data$data)
head(loaded_data$data)
head(loaded_data)
mydata = loaded_data[[1]]
name(mydata)
names(mydata)
lubridate::year(mydata$data$date[1])
runApp()
end_fit_date_max
end_fit_date_min
Sys.Date()
library(shiny)
library(shinyjs)
library(dplyr)
library(ggplot2)
library(plotly)
library(lubridate)
library(PROF)
# locations
loc_abbv = loc_pops$abbreviation
loc_name = loc_pops$location_name
# for now we remove the US and VI
ind = which(loc_abbv %in% c('US', 'VI'))
loc_abbv = loc_abbv[-ind]
loc_name = loc_name[-ind]
year_data = c(2021, 2022, 2023)
nyear = length(year_data)
# Define default end dates for fitting
end_fit_date_min = c(as.Date(paste0(year_data,'-10-01')))
end_fit_date_max = c(as.Date(paste0(year_data+1,'-06-01')))
end_fit_date_max[nyear] = Sys.Date()
end_fit_date_max
end_fit_date_min
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(shiny)
ui <- fluidPage(
# Add a dropdown menu with a subheading
selectInput("my_dropdown", "Select an option",
choices = c("Option 1", "Option 2", "Option 3")),
# Add a subheading below the dropdown
tags$div(
style = "color: gray; font-size: 12px;",
"Select an option from the dropdown menu."
)
server <- function(input, output) {
# Your server logic here
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
# Add a subheading above the dropdown
tags$div(
style = "color: gray; font-size: 12px;",
"Select an option from the dropdown menu."
),
# Add a dropdown menu
selectInput("my_dropdown", "Select an option",
choices = c("Option 1", "Option 2", "Option 3"))
)
server <- function(input, output) {
# Your server logic here
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
# Add a dropdown menu with a subheading between the heading and the menu
selectInput("my_dropdown", "Select an option",
choices = c("Option 1", "Option 2", "Option 3")),
# Add a subheading between the dropdown heading and menu
tags$div(
style = "color: gray; font-size: 12px; margin: 10px 0;",
"Select an option from the dropdown menu."
)
server <- function(input, output) {
# Your server logic here
}
shinyApp(ui, server)
ui <- fluidPage(
# Add a dropdown menu with a subheading
selectInput("my_dropdown", "Select an option",
choices = c("Option 1", "Option 2", "Option 3")),
# Define the subheading element
tags$div(
id = "subheading",
style = "color: gray; font-size: 12px;",
"Select an option from the dropdown menu."
)
server <- function(input, output) {
useShinyjs()
# Move the subheading below the dropdown heading
observe({
moveUI(
id = "subheading",
where = "above",
referenceId = "my_dropdown"
)
})
# Your server logic here
}
sinyApp(ui, server)
shinyApp(ui, server)
library(shinyjs)
shinyApp(ui, server)
quit()
library(shiny)
library(shinyjs)
library(dplyr)
library(ggplot2)
library(plotly)
library(lubridate)
library(PROF)
# download data
# download HHS hospitalizations file
result <<- hhs_hosp_state_down(down_dir="~/Downloads")
names(result)
prof_data = hhs_2_PROF(hhs_path=result$hhs_path, season = 2023, state="CA")
shiny::runApp()
runApp()
quit()
shiny::runApp()
runApp()
shiny::runApp()
library(shiny)
library(shinyjs)
library(dplyr)
library(ggplot2)
library(plotly)
library(lubridate)
library(PROF)
loc_pops
quit()
shiny::runApp()
runApp()
shiny::runApp()
